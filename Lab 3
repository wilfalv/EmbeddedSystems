//=====[Libraries]=============================================================

#include "mbed.h"
#include "arm_book_lib.h"

#define BLINKING_RATE     1000ms

//=====[Declaration and initialization of public global objects]===============

DigitalIn enterButton(BUTTON1);
DigitalIn gasDetector(D2);
DigitalIn overTempDetector(D3);
DigitalIn aButton(D4);
DigitalIn bButton(D5);
DigitalIn cButton(D6);
DigitalIn dButton(D7);

DigitalOut alarmLed(LED1);
DigitalOut incorrectCodeLed(LED3);
DigitalOut systemBlockedLed(LED2);

UnbufferedSerial uartUsb(USBTX, USBRX, 115200);

//=====[Declaration and initialization of public global variables]=============

bool alarmState = OFF;
bool gasState = OFF;
bool tempState = OFF;
int numberOfIncorrectCodes = 0;

//=====[Declarations (prototypes) of public functions]=========================

void inputsInit();
void outputsInit();

void alarmActivationUpdate();
void alarmDeactivationUpdate();

void uartTask();
void uartTask1();
void availableCommands();

//=====[Main function, the program entry point after power on or reset]========

int main()
{
    inputsInit();
    outputsInit();
    while (true) {
        
        alarmActivationUpdate();
        alarmDeactivationUpdate();
        uartTask1();
    }
}

//=====[Implementations of public functions]===================================

void inputsInit()
{
    gasDetector.mode(PullDown);
    overTempDetector.mode(PullDown);
    aButton.mode(PullDown);
    bButton.mode(PullDown);
    cButton.mode(PullDown);
    dButton.mode(PullDown);
}

void outputsInit()
{
    alarmLed = OFF;
    incorrectCodeLed = OFF;
    systemBlockedLed = OFF;
}

void alarmActivationUpdate()
{
    if ( gasDetector || overTempDetector ) {
        alarmState = ON;
        uartUsb.write( "EMERGENCY: ALARM ACTIVE\r\n\r\n", 31);
    }
    if (gasDetector) {
        gasState = ON;
    }
    if (overTempDetector) {
        tempState = ON;
    }
    alarmLed = alarmState;
}

void alarmDeactivationUpdate()
{
    if ( numberOfIncorrectCodes < 5 ) {
        if ( aButton && bButton && cButton && dButton && !enterButton ) {
            incorrectCodeLed = OFF;
        }
        if ( enterButton && !incorrectCodeLed && alarmState ) {
            if ( aButton && bButton && !cButton && !dButton ) {
                alarmState = OFF;
                gasState = OFF;
                tempState = OFF;
                numberOfIncorrectCodes = 0;
            } else {
                incorrectCodeLed = ON;
                numberOfIncorrectCodes = numberOfIncorrectCodes + 1;
            }
        }
    } else {
        systemBlockedLed = ON;
    }
}

void uartTask()
{
   /* char receivedChar = '\0';
    if( uartUsb.readable() ) {
        uartUsb.read( &receivedChar, 1);*/
       /* if ( receivedChar == '1') {*/
            if ( alarmState ) {
                uartUsb.write( "The alarm is activated\r\n", 24);
            } else {
                uartUsb.write( "The alarm is not activated\r\n", 28);
            }
        /*}if ( receivedChar == '2') {*/
            if ( gasState ) {
                uartUsb.write( "Gas was detected\r\n", 18);
            } else {
                uartUsb.write( "Gas was not detected\r\n", 22);
            }
       /* }if ( receivedChar == '3') {*/
            if ( tempState ) {
                uartUsb.write( "High tempriture was detected\r\n\r\n", 32);
            } else {
                uartUsb.write( "High tempriture was not detected\r\n\r\n",36);
            }
            availableCommands();
        /*} */
    /*}*/
}

void uartTask1()
{
   char receivedChar = '\0';
    if( uartUsb.readable() ) {
        uartUsb.read( &receivedChar, 1);
        if ( receivedChar == '2') {
            if ( gasState ) {
                uartUsb.write( "Gas was detected\r\n\r\n", 22);
            } else {
                uartUsb.write( "Gas was not detected\r\n\r\n", 26);
            }
       }if ( receivedChar == '3') {
            if ( tempState ) {
                uartUsb.write( "High tempriture was detected\r\n\r\n", 32);
            } else {
                uartUsb.write( "High tempriture was not detected\r\n\r\n",36);
            }
        } 
    }else {
        uartTask();
        delay(1000);
    }
}

void availableCommands()
{
    uartUsb.write( "Available commands:\r\n", 21 );
    uartUsb.write( "Press '2' to get the gas state\r\n", 34 );
    uartUsb.write( "Press '3' to get the tempriture state\r\n\r\n", 45 );

}
